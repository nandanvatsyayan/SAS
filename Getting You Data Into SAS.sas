* GETTING YOUR DATA INTO SAS 

-->YOU CAN GET YOUR DATA INTO SAS BY 4 METHODS

1.	ENTERING DATA DIRECTLY INTO SAS DATA SET
2.	CREATING DATA SETS FROM RAW DATA FILE
3.	CONVERTING OTHER SOFTWARE'S DATA FILES INTO SAS DATA SET FILES
4. 	READING OTHER SOFTWARE DATA FILES DIRECTLY.


----> ENTERING DATA DIRECTLY INTO SAS DATASET ;

DATA EXAMPLE;
INPUT EMPID		EMPNAME$	EMPLOC$		SALARY;
DATALINES;
101	NANDAN	BANGALORE 60000
102	ANURAG	BANGALORE 45000
103	NAINA	BANGALORE 120000
104	SUMAN	INDORE	20000
105	ABHISHEK	INDORE	25000
106			PUNE	
;
RUN;

*	IN THE ABOVE DATA SET, "EXAMPLE" IS THE NAME OF DATA SET THAT WE ASSIGN. INPUT IS THE METHOD IN WHICH 
	WE ASSIGN.	VARIABLES FOR CHARACTER VARIABLE WE NEED TO USE $ IN FRONT OF VARIABLE, ELSE SAS WON'T BE 
	ABLE TO	READ THE DATA AND ASSIGN CHARACTER DATASET AS BLANK. THE SAME THING DOESN'T REQUIRE A 
	NUMERIC DATASET.	DATALINES OR YOU CAN USE THE CARDS OPTION AS WELL. IT WILL LET YOU ENTER DATA 
	MANUALLY, THE DATA UNDER	DATALINES ARE CALLED OBSERVATIONS. FOR EACH VARIABLE, THERE IS ONE 
	OBSERVATION. IF AN OBSERVATION IS	LEFT BLANK, THE SAS WILL PRINT IT AS BLANKS( ) FOR CHARACTER 
	DATA SETS AND PERIODS (.) FOR NUMERIC DATA SETS.	RUN ENDS THE STATEMENTS YOU CAN SELECT THE CODE 
	AND EXECUTE IT.




---> CREATING DATASET FROM RAW DATAFILE;

DATA RAWDATAFILE;
INFILE "D:\Practice\SAS\Little SAS Book\EMPID EMPNAME$ EMPLOC$ EMPSAL DESIG.txt";
INPUT EMPID EMPNAME$ EMPLOC$ EMPSAL DESIGNATION$;
RUN;

*	THE ABOVE DATASET IS IMPORTED IN SAS FROM A RAW DATA FILE. FOR THAT THE STATMENT WE USE IS INFILE
	THEN DIRECTORY PATH TO WHERE THE FILE IS. IN INPUT SECTION THERE ARE VARIABLES THAT WE ARE GIVING
	FOR EACH ROW. BUT IF YOUR FILE ALREADY HAVE VARIBALES WE CAN SKIP THAT PART. WE WILL LEARN ABOUT 
	HOW TO DO IT IN BLOW TOPICS.

NOTE - 	THE RAW DATA WE IMPORT WITH INFIL STATEMENT ARE NOT NECESSERALY GONNA BE IN PROPER FORMATE.
		CLEANED AND FIXED. SO FOR DIFFERENT KIND OF RAW DATA WE USES SOME DIFFERENT STATEMTS. 
		SOME OF THE ARE MENTIONED BELOW.

A) READING RAW DATA SAPERATED BY SPACES;

DATA RAWDATA;
INFILE "D:\Practice\SAS\Little SAS Book\Raw Data With Space.txt";
INPUT ID NAME$ LOC$ AMOUNT;
RUN;


*
B) 	READING RAW DATA ARRANGED IN COLUMN 
	---> SOME OF THE RAW DATA FILE DO NOT HAVE SPACE OR OTHER DELIMETERS BETWEEN ALL THE VALUES OR PERIOD
	FOR MISSING DATAD, SO FILE CAN'T BE READ USING LIST INPUT( OPTION A). BUT IF EACH OF THE VARIABLE VALUE 
	IS ALWAYS FOUND IN SAME PLACE IN DATA LINE THEN WE CAN USE COLUMN INPUT AS LONG AS DATA ARE CHARACTR
	OR STANDARD NUMERIC(DATA THAT CONTAINS ONLY NUMERALS, DECIMAL POINTS, PLUS AND MINUS SIGN AND "E" FOR
	SINTIFIC NOATION. NUMBERS EMBEDED WITH DATES, COMMA ARE NOT STANDARD NEMERIC);

DATA ARRANGEDINCOLUMN;
INFILE "D:\Practice\SAS\Little SAS Book\Raw Data In Column.txt";
INPUT NAME $1-17 AGE 18-20 LOCATION $21-32 EXP 33-35 SALARY 36-42 DES $43-54;
RUN;


*	IN ABOVE DATASET EVERYTHING IS SAME EXCEPT WITH COLUMN NAME WE HAVE USED RANGE FOR THE OBSERVATION.
	THAT RANGE DEFINES WHAT'S THE RANGE/LENGTH IS GONNA BE FOR EACH VARIBALE.
	
	NOTE--> SOMETIMES THIS METHOD CAN BE TRICKY, FOR EXAMPLE IN MY CODE FOR NAME I HAVE GIVEN THE RANGE
			FROM 1 TO 17, BUT IT'S NOT NECESARY THAT EACH PERSON NAMES GONNA BE 17 LETTERS LONG SOME 
			OF THEM COULD BE ONLY 10 LETTERS ONLY, SO FOR COULMN WHERE OBSERVATION IS ONLY 10 LETTERS
			LONG WITH THIS METHOD THE PRINT COULD BE MESSAY. TO AVOID THAT WE USE METHODS LIKE "MISSOVER"
			OR "TRUNCOVER".


C) READING RAW DATA IN NON STANDARD FORMATE
	---> 	Sometimes raw data are not straightforward numeric or 
			character. For example, we humans easily read the number 
			1,000,001 as one million and one, but your trusty computer 
			sees it as a character string. While the embedded commas 
			make the number easier for us to interpret, they make the 
			number impossible for the computer to recognize without some 
			instructions. In SAS, informats are 
			used to tell the computer how to interpret these types of data. 

	--->	INFORMATES ARE OF 3 TYPES
			a) CHARACTER -- $INFORMATW.   --- INFORMAT IS THE NAME OF INFORMAT W IS THE TOTAL WIDTH
			b) NUMRIC -- INFORMATW.D --- IN NUMBERS D IS THE NUMBER OF DECIMAL PLACES
			c) DATE -- INFORMATW.---  USED FOR PRINTING DATA WHICH CONTAIN DATES ;

DATA PUMPKIN;
INFILE "D:\Practice\SAS\Little SAS Book\PUMPKIN.txt";
INPUT NAME $16. AGE 3. TYPE $1. DATE MMDDYY10. (SCORE1 SCORE2 SCORE3 SCORE4 SCORE5) (4.1);
RUN;


* SELECTED INFORMATES
	
	1.	$CHARw.	--> READS CHARACTER DATA, DOESN'T TRIM LEADING OR TRAILING BLANKS(WIDTH RANGE 1-32767, 
					DEFAULT WIDTH 8 OR LENGHTH OR VARIABLE) 

	2. $UPCASEw.--> CONVERTS CHARATER DATA TO UPCASE(WIDTH RANGE 1-32767,DEFAULT WIDTH 8)
	
	3. $W. --> READS CHARACTER DATA- TRIMS LEADING BLANKS (WIDTH RANGE 1-32767,DEFAULT WIDTH NONE)

	4. ANYDTDTEw.--> READS DATES IN VARIOUS DATE FORMS (WIDTH RANGE 5-32 DEFAULT WIDTH 9)

	5. DATEw. --> READS DATES IN FORMS : DDMMMYY OR DDMMMYYYY (WIDTH RANGE 7-32 DEFAULT WIDTH 7)

	6. DATETIMEw.--> READS DATE TIME VALUES IN THE FORM : DDMMMYY HH:MM:SS:SS (WIDTH RANGE 13-40 DEFAULT WIDTH 18)

	7. DDMMYYw. --> READS DATES IN FORM:  DDMMYY OR DDMMYYYY (WIDTH RANGE 6-32 DEFAULT WIDTH 6)

	8. JULIANw. --> READS JULIAN DATES IN FORM: YYDDD OR YYYYDDD (WIDTH RANGE 5-32 DEFAULT WIDTH 5)

	9. MMDDYYw. --> READS DATES IN FORM : MMDDYY OR MMDDYYYY (WIDTH RANGE 6-32 DEFAULT WIDTH 6)

	10. STIMERw.--> READS TIME IN FORM : HH:MM:SS:SS( OR MM:SS.SS OR SS.SS) (WIDTH RANGE 1-32 DEFAULT WIDTH 10)

	11. TIMEw. --> READS TIME IN FORM : HH:MM:SS.SS OR HH:MM (WIDTH RANGE 5-32 DEFAULT WIDTH 8)

	12. COMMAw.d--> REMOVES EMBEDED COMMAS AND $, CONVERTS LEFT PARENTHESES TO MINUS SIGN
					(WIDTH RANGE 1-32 DEFAULT WIDTH 1)

	13. COMMAXw.--> LIKE COMMAw.d BUT RESERVES ROLE OF COMMA AND PERIOD (WIDTH RANGE 1-32 DEFAULT WIDTH 1)

	14.	PERCENTw.--> CONVERTS PERCENTAGE TO NUMBERS (WIDTH RANGE 1-32 DEFAULT WIDTH 6)

	15. w.d --> READS STANDARD NUMERIC DATA (WIDTH RANGE 1-32 DEFAULT WIDTH NONE)


D)	MIXING INPUT STYLE
	--> EACH OF THE THREE MAJOR INPUT STYLE HAS IT'S OWN ADVANTAGES. LIST STYLE IS THE EASIEST,
		COLUMN STYLE IS BIT MORE WORK AND FORMATED STYLE IS THE HARDEST OF THREE.
		SAS IS SO FLAXIBLE WE CAN MIX AND MATCH ANY OF THESE INPUT STYLE FOR OUR OWN CONVENIENCE. ;

DATA USSTORM;
INFILE "D:\Practice\SAS\Little SAS Book\USSTORM.txt";
INPUT PARKNAME $1-22 STATE $ YEAR @40 ACREAGE COMMA9. ;
RUN;


*
E) CONTROLLING INPUT OPTIONS WITH OPTIONS IN THE INFILE STAMTEMENT

	--> FIRSTOBS -- THE "FIRSTOBS" OPTION TELLS SAS AT WHAT LINE TO BEGIN READING DATA.
					THIS IS USEFULL WHEN DATA FILE HAVE DESCRIPTIVE TEXT OR HEADER INFORMATION AT THE
					BEGINNING AND YOU WANT TO SKIP OVER THESE LINES TO BEGIN READING THE DATA.;


DATA ICECREAMSALE;
INFILE "D:\Practice\SAS\Little SAS Book\ICECREAM SALE.txt" FIRSTOBS=3;
INPUT FLAVOR $1-9 LOCATION BOXESSOLD;
RUN;


	*-->OBS -- FIRST OBS OPTION IS USED ANYTIME YOU WANT TO READ ONLY A PART OF YOUR DATAFILE.
		IT TELLS SAS TO STOP READING WHEN IT GETS TO THAT LINE IN RAW DATA FILE.;

DATA SALEICECREAM;
INFILE "D:\Practice\SAS\Little SAS Book\ICECREAM SALE.txt" FIRSTOBS=3 OBS=4;
INPUT FLAVOR $1-9 LOCATION BOXESSOLD;
RUN;


	*
	--> MISSOVER -- BY DEFAULT, SAS WILL GO TO THE NEXT DATALINE TO READ MORE DATAL IF SAS HAS REACHED
					THE END OF THE DATA LINE AND THERE ARE STILL MORE VARIABLES IN THE INPUT STATEMENT
					THAT HAVE NOT BEEN ASSIGNED VALUES. 
						THE MISS OVER OPTION TELLS SAS THAT IF IT RUNS OUT OF DATA, DON'T GO TO NEXT DATA
					LINE. INSTED ASSIGN MISSING VALUES TO REMAINING VARIBALES. ;

DATA MARKS;
INFILE "D:\Practice\SAS\Little SAS Book\MARKS.txt" MISSOVER;
INPUT NAME$ TEST1 TEST2 TEST3 TEST4 TEST5;
RUN;


	*
	--->TRUNCOVER-- WE NEED THE TRUNCOVER OPTION WHEN WE ARE READING DATA USING COLUMN AND FORMATED INPUT
					AND SOME DATALINES ARE SHORTER THAN OTHERS. ;

DATA USERCOMMUNITY;
INFILE "D:\SAS Datasets\usersCommunity.csv" TRUNCOVER FIRSTOBS=2 DLM="," DSD OBS=100;
INPUT itemid : best32. boardid : best32. userid : best32. isSolvedTopic : best32.;
RUN;


*
F) READING DELIMITED FILES WITH THE DATA STEP
	
		--> DELIMETED FILES ARE RAW DATAFILES THAT HAVE A SPECIAL CHARACTER SEPARATING DATA VALUES. MANY PROGRAM CAN SAVE DATA AS DELIMITED FILES
			OFTEN WITH COMMAS OR TAB CHARATERS FOR DEIMITERS. SAS GIVES US TWO OPTIONS FOR INFILE STATEMENT TO READ DELIMITED FILES.

		
		-->DLM- IF YOU READ YOUR DATA USING LIST INPUT THE DATA STEPS EXPECT YOUR FILE TO HAVE SPACE BETWEEN YOUR DATA VALUE.
				THE "DELIMITER=" OR "DLM=" OPTION IN THE INFILE STATEMENT LETS YOU READ THE DATA FILE WITH OTHER DELIMITERS.
				THE COMMAS AND TABS ARE COMMON DELIMITERS BUT YOU CAN READ DATA FILES WITH ANY DELIMITER CHARACTER BY JUST 
				ENCLOSING DELIMITER CHARACTER IN QUOTATION MARK AFTER THE DLM= OPTION(FOR EXAMPLE DLM="&". ;


DATA COMMUNITY;
INFILE "D:\SAS Datasets\usersCommunity.csv" TRUNCOVER FIRSTOBS=2 DLM="," DSD OBS=100;
INPUT itemid : best32. boardid : best32. userid : best32. isSolvedTopic : best32.;
RUN;


		*
		--> DSD	--	THE DSD(DELIMITER SENSETIVE DATA) OPTION FOR THE INFILE DOES THREE THINGS FOR YOU. FIRST IT IGNORES DELIMETERS IN DATA VALUE
					ENCLOSED IN QUOTATION MARKS, SECOND IT DOESN'T READ QUOTATION MARKS AS PART OF DATA VALUE, THIRD IT TREATS TWO DELIMIERS IN A
					RAW AS MISSING VALUE.	;

DATA DSDEXAMPLE;
INFILE "D:\SAS Datasets\usersCommunity.csv" TRUNCOVER FIRSTOBS=2 DLM="," DSD OBS=100;
INPUT itemid : best32. boardid : best32. userid : best32. isSolvedTopic : best32.;
RUN;


		*
		---> CSV FILES--	COMMA SEPARATED VALUES FILES OR CSV FILES, ARE A COMMON TYPE OF FILE THAT CAN BE READ USING DSD OPTION. MANY PROGRAMMS,
							SUCH AS MICROSOFT EXCEL CAN SAVE DATA IN CSV FORMATE. THESE FILES HAVE COMMAS FOR DELIMETERS AND CONSECUTIVE COMMAS FOR
							MISSING VALUE. IF THERE ARE COMMAS IN ANY OF THE DATA VALUES, THEN THOSE VALUES ARE ENCLOSED IN QUOTATION MARKS.  



G)	READING DELIMTED FILES WITH IMPORT PROCEDURE
		--> SO FAR WE HAVE USED INFILE STATEMENT IN DATASET TO READ DATA FILES. THERE IS ANOTHER PROCEDURE TO READ DELIMITED FILES IN SAS.
			" PROC IMPORT", IT COMES UNDER DATA STEPS AND NOT DATA SET. THE GENERAL SYNTAX FOR PROC IMPORT IS 
			GENERAL SYNTAX -- PROC IMPORT DATAFILE= "FILE NAME" OUT= DATASET; * WHERE "FILE NAME" IS THE ANEM OF THE FILE YOU WANT TO READ
			AND DATASET IS THE NAME OF SAS DATA SET YOU WANT TO CREATE. IF THE FILE CONTAIN DLIMETER WE NEED TO USE DBMS OPTION IN THE PROC
			IMPORT OPTION.;


PROC IMPORT DATAFILE="D:\Practice\SAS\Little SAS Book\heart.csv" OUT=HEART DBMS=" " REPLACE;
RUN;


*
H) OTHER STATEMENTS 
		--> DATAROW -- IF THE DATA DO NOT START IN FIRST LINE OF THE FILE.
		--> GETNAME=NO -- IF FILES CONTAINS ONLY DATA AND NO HEADING. THIS STATEMENT ASSIGNS DEFAULT VARIABLE NAMES.
		--> GUESSINGROWS -- IF DATA FILE HAS MISSING ROW AND NON REPRESENTATIVE DATA IN THE FIRST 20 ROWS 
		
		--> DATAROW=n, 
		--> DELIMITERS= "delimiter character"
		--> GETNAMES=NO
		--> GUESSINGROW=n, 

I) READING EXCEL FILES WITH IMPORT OPTION
		--> SHEET=SHEET-NAME-- IF YOU HAVE MORE THEN ONE SHEET IN YOUR EXCEL FILE
		--> RANGE="SHEE-NAME$UL:LR" -- TO READ SPECIFIC CELL IN EXCEL FILE
		--> MIXED= YES -- IF YOU HAVE COLUMN THAT CONTAINS BOTH NUMERIC AND CHARACTER VALUE.


J) TEMPORARY VERSUS PERMANENT SAS DATASETS

	--> TEMPORARY DATASET;
		
DATA SALES;
INPUT CUSTID	ITEM$	QUANTITY	TOTAL;
DATALINES;
101	MANGO	4	200
102	APPLE	3	150
103	CIGGRATE	1	20
;
RUN;
		
	*
	--> PERMANENT DATASET;


DATA USER.HEARTRATE;
INFILE "D:\Practice\SAS\Little SAS Book\Data\heart.csv" DLM="," DSD FIRSTOBS=2 TRUNCOVER;
INPUT Status$ DeathCause$ AgeCHDdiag Sex$ AgeAtStart Height Weight Diastolic Systolic MRW Smoking AgeAtDeath Cholesterol Chol_Status$ BP_Status$ Weight_Status$ Smoking_Status$;
RUN;



*
K) CREATING A PERMANET DATASET WITH LIBNAME & LIBREF;
	
LIBNAME ELECTRIC "D:\Practice\SAS\Little SAS Book\Data";
DATA ELECTRIC.emission_annual;
INFILE "D:\Practice\SAS\Little SAS Book\Data\emission_annual.xlsx" DLM=" " DSD  TRUNCOVER ;
INPUT Year State$ ProducerType$ EnergySource$ CO2 SO2 NOx;
RUN;

LIBNAME ELECTRIC "D:\Practice\SAS\Little SAS Book\Data";
PROC IMPORT DATAFILE= "D:\Practice\SAS\Little SAS Book\Data\emission_annual.xlsx" OUT=Emission DBMS=XLSX REPLACE ;
RUN;
