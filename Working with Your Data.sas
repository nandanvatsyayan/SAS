*
A)	CREATING AND REDEFINING VARIABLES

--->	VARIBALE = EXPRESSION 
		TYPE OF EXPRESSION								ASSIGNMENT STATEMENT
		-NUMERIC CONSTANT								-QWERTY=10
		-CHARACTER CONSTNAT								-QWERTY="TEN"
		-A VARIABLE										-QWERTY= OLDVAR
		-ADDITION										-QWERTY= OLDVAR + 10
		-SUBTRACTION									-QWERTY= OLDVAR - 10
		-MULTIPLICATION									-QWERTY= OLDVAR * 10
		-DIVISION										-QWERTY= OLDVAR / 10
		-EXPONENTIATION									-QWERTY= OLDVAR ** 10

---> SAS FOLLOWS THE STANDARD MATHEMATICAL RULES OF PRECEDENCE. SAS PERFORMS EXPONENTIATION FIRST, THEN MULTIPLICATION AND DIVISION
	 FOLLOWED BY ADDITION AND SUBSTRACTION. WE CAN USE PARENTHESES TO OVERRIDE THAT ORDER.


---> X= 10 * 4 + 3 ** 2 	X= 49
---> X= 10 * (4 + 3 ** 2)	X=130



B) USING SAS FUNCTION

---> SAS HAS HUNDREDS OF FUNCTIONS IN GENERAL AREAS INCLUDING
	 -CHARACTER
	 -CHARACTER STRING MATCHING
	 -DATE AND TIME
	 -DESCRIPTIVE STATISTICS
	 -DISTANCE
	 -FINANCIAL
	 -MACRO
	 -MATHEMATICAL
	 -PROBABILITY
	 -RANDOM NUMBER
	 -STATE AND ZIP
	 -VARIBAL INFORMATION


---> SELECTED SAS CHARACTER FUNCTION

	-ANYALNUM 	--> ANYALNUM(arg, start)	--> RETURNS POSITION OF FIRST OCCURANCE OF ANY ALPHABETIC CHARACTER OR NUMERAL AT OR AFTER OPTIONAL
											POSITION.
	-ANYALPHA 	--> ANYALPHA(arg,start)		--> RETURNS POSITION OF FIRST OCCURRENCE OF ANY ALPHABETIC CHARACTER AT OR AFTER OPTIONAL START POSITION.
	-ANYDIGIT 	--> ANYDIGIT(arg,start)		--> RETURNS POSITION OF FIRST OCCURANCE OF ANY NUMERAL AT OR AFTER OPTIONAL START POSITION.
	-ANYSPACE 	--> ANYSPACE(arg,start)		--> RETURNS POSITION OF FIRST OCCURANCE OF ANY WHITE SPACE CHARACTER AT OR AFTER OPTIONAL START POSITION.
	-CAT	  	--> CAT(arg1,arg2..arg-n) 	--> CONCATENATES TWO OR MORE CHARACTER STRING TOGETHER LEAVING LEADING AND TRAILING BLANKS.
	-CATS	  	--> CATS(arg1,arg2..arg-n)	--> CONCATENATES TWO OR MORE CHARACTER STRING TOGETHER STRIPING LEADING AND TRAILING BLANKS.
	-CATX	  	--> CATX("sparator-string
				  	arg1,arg2..arg-n)		--> CONCATENATES TWO OR MORE CHARACTER STRING TOGETHER STRIPPING LEADING AND TRAILING BLANKS AND INSERTING
												A SEPARATOR STRING BETWEEN ARGUMENTS.
	-COMPRESS 	--> COMPRESS(arg,"char")	--> REMOVES SPACE OR OPTIONAL CHARACTERS FROM CHARACTER STRING.
	-INDEX	  	--> INDEX(arg, "string")  	--> RETURNS STARTING POSITION FOR STRING OF CHARACTER.
	-LEFT	  	--> LEFT(arg)				--> LEFT ALIGN A SAS CHARACTER EXPRESSION.
	-LENGTH	  	--> LENGTH(arg)				--> RETURNS THE LENGTH OF AN ARGUMENT NOT COUNTING TRAILING BLANKS ( MISSING VALUE HAVE A LENGTH OF 1).
	-PROPCASE 	--> PROPCASE(arg)			--> CONVERTS FIRST CHARACTER IN THR WORD TO UPPER CASE AND REMAINING THE CHARACTER IN LOWER CASE.
	-SUBSTR	  	--> SUBSTR(arg,position,n)	-->	EXTRACT A SUBSTRING FROM AN ARGUMENT STARTING AT POSITION FOR N CHARACTER OR UNTILL IF NO NO4).
	-TRANSLATE	--> TRANSLATE(source,to-1,
					from-1...to-n,from-n)	--> REPLACES FROM CHARACTER IN SOURCE WITH TO CHARACTERS (ONE TO ONE REPLACEMENT ONLY-- YOU CAN'T 
												REPLEACE ONE CHARACTER WITH TWO, FOR EXAMPLE.
	-TRANSWRD	--> TRANSWRD(source,from,to)--> REPLACES FROM CHARACTER STRING IN SOURCE TO CHARACTER STRING.
	-TRIM		--> TRIM(arg)				--> REMOVES TRAILING BLANKS FROM CHARACTER EXPRESSION.
	-UPCASE		--> UPCASE(arg)				--> CONVERTS ALL LETTERS IN ARGUMENT IN UPPER CASE.



---> SELECTED SAS NUMERIC FUNCTION

	-INT		--> INT(arg)				--> RETURNS THE INTEGER PORTION OF ARGUMENT.
	-LOG		--> LOG(arg)				--> NATURAL LOGARITHM.
	-LOG10		--> LOG10(arg)				--> LOGARITH TO THE BASE 10.
	-MAX		--> MAX(arg1, arg2..arg-n)	--> LARGEST NON MISSING VALUE.
	-MEAN		--> MEAN(arg1, arg2..arg-n)	-->	ARITHMETIC MEAN OF NON-MISSING VALUES.
	-MIN		--> MIN(arg1, arg2..arg-n)	--> SMALLEST NON MISSING VALUE.
	-N			--> N(arg1, arg2..arg-n)	--> NUMBERS OF NON MISSING VALUE.
	-NMISS		--> NMISS(arg1, arg2..arg-n)--> NUMBER OF MISSING VALUE.
	-ROUND		--> ROUND(arg,round-of-unit)--> ROUNDS OF NEAREST ROUND OFF UNIT.
	-SUM		-->	SUM(arg1,arg2...arg-n)	--> SUM OF NON MISSING VALUE.

	-DATEJUL	--> DATEJUL(julian-date)	--> CONVERTS A JULIAN DATE TO A SAS DATE VALUE.
	-DAY		--> DAY(date)				--> RETURNS THE DAY OF MONTH FROM SAS DATE VALUE.
	-MDAY		--> MDAY(month,day,year)	--> RETURNS A SAS DAE VALUE FROM MONTH, DAY AND YEAR VALUES
	-MONTH		--> MONTH(date)				--> RETURNS THE MONTH 1-12 FROM A SAS DATE VALUE.
	-QTR		--> QTR(date)				--> RETURNS YEARLY QUARTER (1-4) FROM A SAS DATE VALUE.
	-TODAY		--> TODAY()					--> RETURNS THE CURRNT DATE AS SAS DATE VALUE.
	-WEEKDAY	--> WEEKDAY(date)			--> RETURNS DAY OF WEEK (1=SUNDAY) FROM SAS DATEVALUE.
	-YEAR		--> YEAR(date)				--> RETURNS YEAR FROM SAS DATE VLAUE.
	-YRDIF		--> YRDIF(start-date
					end-date,"AGE")			--> COMPUTES DIFFERENCE IN YEARS BETWEEN TWO SAS DATE VALUES TAKING LEAP YEARS INTO ACCOUNT.



C)	USING IF THEN STATEMENT
	--->	FREQUENTLY, WE WANT AN ASSIGNMENT STATEMENT TO APPLY TO SOME OBSERVATIONS, BUT NOT ALL-UNDER SOME CONDITIONS, BUT NOT OTHERS.
			THIS IS CALLED CONDITIONAL LOGIC AND WE DO IT WITH IF,THEN STATEMENT.
			
											IF CONDITION THEN ACTION:
											IF MODEL= "Berlinetta" THEN MAKE = "Ferrari":

	--->		SYMBOLIC				Mnemonic					MEANING
				=						EQ							EQUALS
				¬ =, ^ =, or ~ =		NE							NOT EQUAL
				>						GT							GREATER THAN
				<						LT							LOWER THAN
				>=						GE							GREATHER THAN EQUAL TO
				>=						LE							LOWER THAN EQUAL TO
	


	--->	THE "IN" OPERATORS ALSO MAKES COMPARISONS, BUT IT WORKS A BIT DIFFERENTLY. IN COMPRESSES THE VALUE OF A VARIABLE TO A LIST OF VALUES.
			IF MODEL IN ('MODEL T' , 'MODEL A') THEN MAKE = 'FORD'

	---> 	A SINGLE IF-THEN STATEMENT CAN HAVE ONLY ONE ACTION, IF YOU ADD THE KEYWORDS DO AND END, THEN YOU CAN EXECUTE MORE THAN ONE ACTION.
			IF CONDITION THEN DO:								IF MODEL = 'DMC-12' THEN DO:
			ACTION1:											MAKE = "DELOREAN"
			ACTION2:											BODYSTYLE="COUPE"
			END:												END:

	--->	YOU CAN ALSO SPECIFY MULTIPLE CONDITIONS WITH KEYWORD AND and OR.
			IF CONDITION AND CONDITION THEN ACTION:
			IF MAKE = "ALFA ROMEO" AND MODEL= "TRIPO B" THEN SEAT=1:

	--->	LIKE THE COMPARISON OPERATORS AND and OR MAYBE SYMBOLIC OR MNEMONIC


				SYMBOLIC				Mnemonic					MEANING
				&						AND 						ALL COMPARISON MUST BE TRUE
				| , ¦ , or ! 			OR 							ONLY ONE COMPARISON MUST BE TRUE
	

	--->	BE CAREFUL WITH LONG STRING OF COMPARISON THEY CAN BE LOGICAL MAZE. ;	


DATA OLDCAR;
INFILE "D:\Practice\SAS\Little SAS Book\Data\Auction.csv";
INPUT MAKE $ 1-13 MODEL $ 15-29 YEARSMADE SEAT MILLIONSPAID;
IF YEARSMADE < 1980 THEN VETERAN="YES";
IF MODEL = "F-88" THEN DO;
MAKE = "OLDSMOBILE";
SEAT= 2;
END;
RUN;



*
D)	GROUPING OBSERVATIONS WITH IF-THEN/ELSE STATEMENTS

	--->	THE SIMPLEST AND MOST COMMON WAY TO CREATE A GROUPING VARIABLE IS WITH A SERIES OF "IF-ELSE" STATEMENT BY ADDING THE KEYWORD "ELSE" 
			TO "IF" STATEMENT, WE CAN TELL SAS THAT THESE STATEMENTS ARE RELATED.

	--->	IF CONDITION THEN ACTION:
				ELSE IF CONDITION THEN ACTION:
				ELSE IF CONDITION THEN ACTION:

	--->	;

DATA SURVEY;
INFILE "D:\Practice\SAS\Little SAS Book\Data\survey of home improvements.csv" DLM="," DSD TRUNCOVER FIRSTOBS=2;
INPUT owner$	description$  cost;
IF cost = . THEN COSTGROUP='MISSING';
ELSE IF cost < 2000 THEN COSTGROUP='LOW';
ELSE IF cost < 10000 THEN COSTGROUP='MEDIUM';
ELSE COSTGROUP='HIGH';
RUN;


*
E)	SUBSETTING YOUR DATA
	
	--->	WE OFTEN WANT TO INCLUDE SOME OF OBSERVATION IN A DATASET AND EXCLUDE THE REST. THE MOST COMMON WAY TO DO THIS IS WITH A SUBSETTING 
			IF STATEMENT IN DATASETP.

	---> 	IF EXPRESSION:
			IF SEX="F":

	--->	IF YOU DO NOT LIKE SUBSETTING THEN THERE IS ANOTHER ALTERNATIVE "DELETE"
			IF SEX="F": IF SEX="M" THEN DELETE;

DATA COMEDY;
INFILE "D:\Practice\SAS\Little SAS Book\Data\Shakespearean comedy.csv" DLM="," DSD FIRSTOBS=2 TRUNCOVER;
INPUT TITLE$	YEAR	TYPE$;
IF TYPE = "comedy";
RUN;


*
F)	WORKING WITH SAS DATES
	
	--->	DATES CAN BE TRICKY TO WORK WITH. SOME MONTHS HAVE 30 DAYS, SOME 31, SOME 28 AND DON'T FOREGET LEAP YEAR. SAS DATES SIMPLIFY ALL THIS.
			A SAS DATE IS A NUMERIC VALUE EQUAL TO THE NUMBER OF DAYS SINCE JAN,1,1990. 

	--->	SAS HAS SPECIAL TOOLS FOR WORKING WITH DATES: 
			-"INFORMATS" FOR READING THE DATES
			-FUNCTIONS FOR MANIPULATING DATES
			-"FORMATS" FOR PRINTING DATES

	--->	INFORMATS - TO READ ARIABLES THAT ARE DATES, YOU USE FORMATTED STYLE INPUT. 

	--->	FUNCTIONS - SAS DATE FUNCTION PERFORM A NUMBER OF HANDY OPERATIONS. THE OPERATION BELOW USES THREE FUNCTIONS TO COMPUT AGE FROM A 
						VARIABLE NAME BIRTHDATE.
						
						CURRENTAGE= INT(YRDIF(BIRTHDATE, TODAY(), "AGE"))

	--->	FORMATES-	IF YOU PRINT A SAS DAT VALUE. SAS WILL BY DEFAULT PRINT THE ACTUAL VALUE - THE NUMBER OF DAYS SINCE JANUARY 1,1960. SINCE 
						THIS IS NOT VERY HELPFULL TO MOST PEOPLE, SAS HAS VERITY OF FORMATS FOR PRINTING DATES IN DIFFERENT FORMS.
											FORMAT BIRTHDATE = WORDDATE18.  ;


DATA LIBRARY;
INFILE "D:\Practice\SAS\Little SAS Book\Data\LIBRARY.csv" DLM="," DSD FIRSTOBS=2 TRUNCOVER;
INPUT NAME $11. +1 DOB MMDDYY10. +1 ISSUE_DATE ANYDTDTE10. DUE_DATE DATE11.;
DAYSOVERDUE = TODAY() - DUE_DATE;
CURRENTAGE= INT(YRDIF(DOB,TODAY(), "AGE"));
IF ISSUE_DATE > "01JAN2012"D THEN NEWCARD = "YES";
RUN;
PROC PRINT DATA=LIBRARY;
FORMAT ISSUE_DATE MMDDYY8. DUE_DATE WEEKDATE17.;
RUN;


*
G)	SELECTED DATE INFORMATS, FUNCTIONS AND FORMATS


---->	INFORMATS

		INFORMAT			DEFINITION										WIDTH RANGE						DEFUALT WIDTH
		-ANYDTDTEw.			-READS DATES IN VARIOUS DATE FORMS				-5-32							-9
		-DATEw.				-READS DATES IN FORM: DDMMMYYYY 				-7-32							-7
		-DDMMYYw.			-READS DATES IN FORM: DDMMYY OR DDMMYYYY		-6-32							-6
		-JULIANw.			-READS JULIAN DATES IN FORMS: YYDDD or YYYYDDD	-5-32							-5
		-MMDDYYw.			-READS DATES IN FORM: MMDDYY or MMDDYYYY		-6-32							-6

---->	FUNCTIONS
		FUNCTION			SYNTAX					DEFINITION
		-DATEJUL			-DATEJUL(julian-date)	-CONVERTS A JULIAN DATE TO A SAS DATE VALUE.
		-DAY				-DAY(date)				-RETURNS THE DAY OF THE MONTH FROM A SAS DATE VALUE.
		-MDY				-MDY(month,date,year)	-RETURNS A SAS DATE VALUE FROM MONTH, DATE AND YEAR VALUES.
		-MONTH				-MONTH(date)			-RETURNS THE MONTH (1-12) FROM A SAS DATE VALUE.
		-QTR				-QTR(date)				-RETURNS YEARSLY QUATER (1-4) FROM SAS DATE VALUE.
		-TODAY				-TODAY()				-RETURNS CURRENT DATE AS A SAS DATE VALUE.
		-WEEKDAY			-WEEKDAY(date)			-RETURNS DAYS OF WEEK (1=SUNDAY) FROM SAS DATE VALUE.
		-YEAR				-YEAR(date)				-RETRUNS YEAR FROM SAS DATE VALUE
		-YRDIF				-YRDIF(start-date,
							 end-date, "AGE")		-COMPUTES DIFFERENCE IN YEARS BETWEEN TWO SAS DATE VLAUES TAKING LEAP YEAR IN ACCOUNT.

---->	FORMATS
		FORMATES			DEFINITION											WIDTH RANGE						DEFAULT WIDTH
		DATEw.				WRITES SAS DATE VLAUES IN FORM: DDMMMYY				5-11							7
		EURDFDDw.			WRITES SAS DATE VALUES IN FORM:	DD.MM.YY			2-10							8
		JULIANw.			WRITES A JULIAN DATE FROM SAS DATE VLAUE			5-7								5
		MMDDYYw.			WRITES SAS DATE VLAUES IN FORM: MMDDYY or MMDDYYYY	2-10							8
		WEEKDATEw.			WRITES SAS DATE VALUES IN FORM: 
							day-of-week, month-name dd,yy or yyyy				3-37							29
		WORDDATEw.			WRITES SAS DATE VALUES IN FORM: month-name dd,yyyy	3-32							18




H)	USING RETAIN AND SUM STATEMENT
	--->	WHEN READING RAW DATA, SAS SETS THE VALUE OF ALL VARIABLES EQUAL TO MISSING AT THE START OF EACH ITERATION OF THE DATA STEP. THESE 
			VALUES MAY BE CHANGED BY INPUT OR ASSIGNMENT STATEMENT, BUT THEY ARE SET BACK TO MISSING AGAIN WHEN SAS RETURNS TO THE TOP OF THE
			DATA STEP TO PROCESS THE NEXT OBSERVATION. "RETAIN" AND "SUM" STATEMENTS CHANGE THAT.

	--->	RETAIN STATEMENT
			USE THE RETAIN STATEMENT WHEN YOU WANT SAS TO PRESERVE A VARIABLE'S VALUE FROM THE PREVIOUS ITERATION OF THE DATA STEP. THE "RETAIN"
			STATEMENT CAN APPEAR ANYWHERE IN THE DATA STEP AND HAS THE FOLLOWING FORM, WHERE ALL VAIRABLES TO BE RETAINED ARE LISTED AFTER "RETAIN"
			KEYWORD.
		
			RETAIN variable-list:

			RETAIN variable-list initial-value:

	--->	SUM STATEMENT
			A SUM STATEMENT ALSO RETAINS VALUES FROM THE PERVIOUS ITERATION OF THE DATA STEP, BUT YOU CAN USE IT FOR THE SPECIAL CASES WHERE
			YOU SIMPLY WANT TO CUMULATIVELY ADD THE VALUE OF AN EXPRESSION TO A VARIABLE. A SUM STATEMENT, LIKE AN ASSIGNMENT STATEMENT,
			CONTAINS NO KEYWORDS. IT HAS THE FOLLWOING FORM:

			VARIABLE + EXPRESSION

			RETAIN 	VARIABLE 0:
			VARIBALE = SUM(VARIABLE, EXPRESSION);


DATA BASEBALL;
INFILE "D:\Practice\SAS\Little SAS Book\Data\The minor league baseball team.csv" DLM="," DSD FIRSTOBS=2 TRUNCOVER;
INPUT DATE ANYDTDTE7. TEAM$ HITS RUNS;
RETAIN MAXRUNS;
MAXRUNS=MAX(MAXRUNS, RUNS);
RUNSTODATE + RUNS;
RUN;
PROC PRINT DATA=BASEBALL;
RUN;



*
I)	SIMPLYFYING PROGRAMS WITH ARRAY
	--->	AN ARRAY IS AN ORDERED GROUP OF SIMILAR ITEMS.
	--->	ARRAY ARE DEFINED USING ARRAY STATEMENT IN DATA STEP
	--->	ARRAY name (n) $ variable-list:
	--->	ARRAY store (4)	Macys Penneys Sears Target;

DATA SONGRATING;
INFILE "D:\Practice\SAS\Little SAS Book\Data\KBRK.csv" DLM="," DSD FIRSTOBS=2 TRUNCOVER;
INPUT CITY$	AGE	WJ KT TR FLIP TTR;
ARRAY SONG (5) WJ KT TR FLIP TTR;
DO I = 1 TO 5;
IF SONG(I) = 9 THEN SONG(I)=.;
END;
RUN;
PROC PRINT DATA=SONGRATING;
RUN;



*
J)	USING SHORTCUTS FOR LISTS OF VARIBALE NAMES
	--->	NUMBERED RANGE LIST-	VARIABLE WHICH STARTS WITH CHARACTER AND ENDS WITH CONSECUTIVE NUMBER CAN BE PART OF A NUMERERED RANGE.
			
			VARIBALE LIST 											ABBVIVATED LIST
			INPUT cat8 cat9 cat10 cat11 cat12 						INPUT cat8 - cat12

	--->	NAME RANGE LIST-	NAME RANGE LIST DEPENDS ON INTERNAL ORDER, OR POSITION OF THE VARIBALES IN THE SAS DATASET. THIS IS DETERMINED BY
			THE ORDER OF VARIBALES IN DATA STEP.

			DATA EXAMPLE
				INPUT Y A C H R:
				B = C + R:
			RUN:

			VARIABLE LIST 											ABBRIVATED LIST
			PUT Y A C H R:											PUT Y -- B:
	

	--->	NAME PREFIX LIST-	VARIBALES THAT STARTS WITH SAME CHARACTER CAN BE PART OF A NAME PREFIX LIST, AND CAN BE USED IN SOME SAS STATEMENTS
			AND FUNCTIONS.

			VARIBALE LIST											ABBRIVATED LIST
			DOGBILLS = SUM(DOGVET, DOGFOOD, DOG_CARE):				DOGBILLS= SUM(OF DOG:):

	--->	SPECIAL SAS NAME LIST-	THE SPECIAL NAME LIST _ALL_, _CHARACTER_ and _NUMERIC_ CAN ALSO BE USED ANY PLACE YOU WANT EITHER ALL THE
			VARIABLES, ALL THE CHARACTER VARIABLE, OR ALL THE NUMERIC VAIRABLE.
			;


DATA SONG;
INFILE "D:\Practice\SAS\Little SAS Book\Data\KBRK.csv" DLM="," DSD FIRSTOBS=2 TRUNCOVER;
INPUT CITY$ AGE WJ KT TR FLIP TTR;
ARRAY NEW (5) SONG1 - SONG5;
ARRAY OLD (5) WJ -- TTR;
DO I = 1 TO 5;
	IF OLD(I)=9 THEN NEW(I)=.;
		ELSE NEW(I) = OLD(I);
	END;
	AVGSCORE= MEAN(OF SONG1 - SONG5);
RUN;
